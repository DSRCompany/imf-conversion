//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.08.11 at 01:51:42 PM MSK 
//


package org.smpte_ra.reg._2003._2012;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TapeFormatType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TapeFormatType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="TapeFormatNull"/>
 *     &lt;enumeration value="BetacamFormat"/>
 *     &lt;enumeration value="BetacamSPFormat"/>
 *     &lt;enumeration value="VHSFormat"/>
 *     &lt;enumeration value="SVHSFormat"/>
 *     &lt;enumeration value="EightMillimeterFormat"/>
 *     &lt;enumeration value="Hi8Format"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TapeFormatType")
@XmlEnum
public enum TapeFormatType {

    @XmlEnumValue("TapeFormatNull")
    TAPE_FORMAT_NULL("TapeFormatNull"),
    @XmlEnumValue("BetacamFormat")
    BETACAM_FORMAT("BetacamFormat"),
    @XmlEnumValue("BetacamSPFormat")
    BETACAM_SP_FORMAT("BetacamSPFormat"),
    @XmlEnumValue("VHSFormat")
    VHS_FORMAT("VHSFormat"),
    @XmlEnumValue("SVHSFormat")
    SVHS_FORMAT("SVHSFormat"),
    @XmlEnumValue("EightMillimeterFormat")
    EIGHT_MILLIMETER_FORMAT("EightMillimeterFormat"),
    @XmlEnumValue("Hi8Format")
    HI_8_FORMAT("Hi8Format");
    private final String value;

    TapeFormatType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TapeFormatType fromValue(String v) {
        for (TapeFormatType c: TapeFormatType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
