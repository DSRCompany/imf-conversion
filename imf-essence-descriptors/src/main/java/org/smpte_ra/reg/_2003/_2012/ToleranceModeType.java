//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.08.11 at 01:51:42 PM MSK 
//


package org.smpte_ra.reg._2003._2012;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ToleranceModeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ToleranceModeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="ToleranceMode_Estimated"/>
 *     &lt;enumeration value="ToleranceMode_Assumed"/>
 *     &lt;enumeration value="ToleranceMode_Precise"/>
 *     &lt;enumeration value="ToleranceMode_Window"/>
 *     &lt;enumeration value="ToleranceMode_Interpolated"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ToleranceModeType")
@XmlEnum
public enum ToleranceModeType {

    @XmlEnumValue("ToleranceMode_Estimated")
    TOLERANCE_MODE_ESTIMATED("ToleranceMode_Estimated"),
    @XmlEnumValue("ToleranceMode_Assumed")
    TOLERANCE_MODE_ASSUMED("ToleranceMode_Assumed"),
    @XmlEnumValue("ToleranceMode_Precise")
    TOLERANCE_MODE_PRECISE("ToleranceMode_Precise"),
    @XmlEnumValue("ToleranceMode_Window")
    TOLERANCE_MODE_WINDOW("ToleranceMode_Window"),
    @XmlEnumValue("ToleranceMode_Interpolated")
    TOLERANCE_MODE_INTERPOLATED("ToleranceMode_Interpolated");
    private final String value;

    ToleranceModeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ToleranceModeType fromValue(String v) {
        for (ToleranceModeType c: ToleranceModeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
