<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2016 Netflix, Inc.

        This file is part of IMF Conversion Utility.

        IMF Conversion Utility is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        IMF Conversion Utility is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with IMF Conversion Utility.  If not, see <http://www.gnu.org/licenses/>.

-->
<conversion xmlns="http://conversion.imfutility.netflix.com">

    <imfValidation>%{dynamic.validateTool} -i "%{dynamic.imp}" -c "%{dynamic.cpl}" -d "%{dynamic.workingDir}" -f "%{dynamic.outputValidationFile}"</imfValidation>

    <formats>
        <!--
            specific configuration for each format
        -->
        <format name="dpp">
            <!--
                tmp context for temporary template parameters
            -->
            <tmpContext>
                <param id="videoEncoded" deleteOnExit="true">output.x264</param>
                <param id="audioEncoded" deleteOnExit="true">output.pcm</param>
                <param id="mediaInfoOutput" deleteOnExit="true">mediaInfo.xml</param>
            </tmpContext>

            <mediaInfoCommandVideo>%{tool.ffprobe} -select_streams v:0 -show_streams -noprivate -print_format xml=x=1
                "%{dynamic.mediaInfoInput}"
            </mediaInfoCommandVideo>
            <mediaInfoCommandAudio>%{tool.ffprobe} -select_streams a:0 -show_streams -noprivate -print_format xml=x=1
                "%{dynamic.mediaInfoInput}"
            </mediaInfoCommandAudio>
            <mediaInfoCommandSubtitle>%{tool.ffprobe} -select_streams d:0 -show_streams -noprivate -print_format xml=x=1
                "%{dynamic.mediaInfoInput}"
            </mediaInfoCommandSubtitle>


            <formatConfigurations>
                <formatConfiguration name="main">

                    <!--
                        Destination parameters for conversion
                     -->
                    <conversionParameters>
                        <video>
                            <width>1920</width>
                            <height>1080</height>
                            <frameRate>25 1</frameRate>
                            <pixelFormat>yuv422p10le</pixelFormat>
                            <bitDepth>10</bitDepth>
                        </video>
                        <audio>
                            <sampleRate>48000</sampleRate>
                            <bitsSample>24</bitsSample>
                        </audio>
                    </conversionParameters>

                    <!--
                        1. decode each video segment and redirect output to encode's input
                        => flatten encoded video
                    -->
                    <execEachSequence type="video" name="encodeVideo">
                        <pipe>
                            <cycle>
                                <execEachSegment name="decode_video">
                                    <execOnce name="decode_video">
                                        "%{tool.ffmpeg}" -y -i "%{resource.essence}" -map 0:0 -ss %{resource.startTimeTC}
                                        -t %{resource.durationTC} -an
                                        -vf
                                        "scale=iw*sar*min(1920/(iw*sar)\,1080/ih):ih*min(1920/(iw*sar)\,1080/ih),pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=25"
                                        -pix_fmt yuv422p10le -f rawvideo -
                                    </execOnce>
                                </execEachSegment>
                            </cycle>
                            <execOnce name="encode_video">
                                "%{tool.x264}" --input-res 1920x1080 --input-csp i422 --input-depth 10 -
                                --colorprim bt709 --transfer bt709 --colormatrix bt709 --tune psnr
                                --fps 25/1 --interlaced --force-cfr --output-csp i422
                                --avcintra-class 100 -o "%{tmp.videoEncoded}"
                            </execOnce>
                        </pipe>
                    </execEachSequence>
                    
                    <!--
                        2. Extract each audio segment from MXF due to FFMPEG mxf reading issue
                    -->
                    <execEachSequence type="audio" name="extractAudioSegments">
                        <execEachSegment name="extract_audio">
                            <execOnce name="extract_audio">
                                "%{tool.mxf2raw}" -p "%{seq.num}-%{segm.num}" --start %{resource.startTimeFrameEU}
                                --dur %{resource.durationFrameEU} "%{resource.essence}"
                            </execOnce>
                            <!-- to delete intermediate files at the end -->
                            <dynamicParameter name="audio-segment-tmp-%{seq.num}-%{segm.num}" deleteOnExit="true">
                                %{seq.num}-%{segm.num}_a0.raw
                            </dynamicParameter>
                        </execEachSegment>
                    </execEachSequence>

                    <!--
                        3. decode each audio segment and redirect output to encode's input
                           => flatten encoded audio
                    -->
                    <execEachSequence type="audio" name="encodeAudio">
                        <pipe>
                            <cycle>
                                <execEachSegment name="decode_audio">
                                    <execOnce name="decode_audio">
                                        "%{tool.ffmpeg}" -f s%{seq.bits_per_sample}le -ar %{seq.sample_rate} -ac %{seq.channels_num}
                                        -i "%{seq.num}-%{segm.num}_a0.raw" -vn -af aresample=48000
                                        -acodec pcm_s24le -f s24le -
                                    </execOnce>
                                </execEachSegment>
                            </cycle>
                            <execOnce name="encode_audio">
                                "%{tool.ffmpeg}" -f s24le -ar %{seq.sample_rate} -ac %{seq.channels_num} -i - -vn -c:a
                                copy -f wav %{seq.num}-audio-encoded.wav
                            </execOnce>
                        </pipe>
                        <dynamicParameter name="concatAudioInput" concat="true">-i "%{seq.num}-audio-encoded.wav"
                        </dynamicParameter>
                        <dynamicParameter name="concatAudioMap" concat="true">[%{seq.num}:a]</dynamicParameter>
                        <!-- to delete intermediate files at the end -->
                        <dynamicParameter name="audio-virtual-track-wav-%{seq.num}" deleteOnExit="true">
                            %{seq.num}-audio-encoded.wav
                        </dynamicParameter>
                    </execEachSequence>

                    <!--
                        4. Remap audio in accordance with AudioMap.xml
                    -->
                    <execOnce name="audioMaping">
                        <!-- [0:a] is a simple workaround to allow amerge with a single file. It is omitted at pan stage -->
                        "%{tool.ffmpeg}" %{dynamic.concatAudioInput} -filter_complex
                        "%{dynamic.concatAudioMap}[0:a]amerge,pan=%{dynamic.panParameter}[aout]"
                        -map "[aout]" -acodec pcm_s24le -ar 48000 -f s24le "%{tmp.audioEncoded}"
                    </execOnce>

                    <!--
                        5. create output .mxf from flatten encoded video and audio
                    -->
                    <execOnce name="muxing_mxf">
                        "%{tool.bmx}" -t as11op1a -o "%{dynamic.output}.mxf"
                        --dm-file as11 "%{dynamic.as11CoreFramework}"
                        --dm-file dpp "%{dynamic.ukDppFramework}"
                        --seg "%{dynamic.as11SegmentationFramework}"
                        --afd 10 --avci100_1080i "%{tmp.videoEncoded}"
                        -q 24 -s 48000 --audio-chan %{dynamic.ebuAudioTracks}
                        --pcm "%{tmp.audioEncoded}"
                    </execOnce>

                    <!--
                        6. Extract each subtitle TTML segment from MXF
                    -->
                    <execEachSequence type="subtitle" name="extractSubtitleSegments">
                        <execEachSegment name="extract_ttml">
                            <execOnce name="extract_ttml">
                                "%{tool.as-02-unwrap}" "%{resource.essence}" "%{seq.num}-%{segm.num}.xml"
                            </execOnce>
                            <!-- to delete intermediate files at the end -->
                            <dynamicParameter name="ttml-segment-tmp-%{seq.num}-%{segm.num}" deleteOnExit="true">
                                %{seq.num}-%{segm.num}.xml
                            </dynamicParameter>

                            <dynamicParameter name="concatTTML" concat="true"> --ttml %{seq.num}-%{segm.num}.xml %{resource.offsetTC} %{resource.startTimeTC} %{resource.endTimeTC}</dynamicParameter>

                        </execEachSegment>

                        <execOnce name="convert_ttml_to_stl">
                            %{dynamic.ttml-to-stl} %{dynamic.concatTTML} --outputSTL %{seq.num}-%{dynamic.output}.stl --metadata "%{dynamic.metadataXml}"
                        </execOnce>
                    </execEachSequence>
                </formatConfiguration>
            </formatConfigurations>
        </format>
    </formats>
</conversion>

