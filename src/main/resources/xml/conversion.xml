<?xml version="1.0" encoding="UTF-8"?>
<conversion xmlns="http://conversion.imf.netflix.com">
    <formats>
        <!--
            specific configuration for each format
        -->
        <format name="dpp">
            <!--
                tmp context for temporary template parameters
            -->
            <tmpContext>
                <param id="videoEncoded">output.x264</param>
                <param id="audioEncoded">output.pcm</param>
            </tmpContext>

            <!--
                Destination parameters for conversion
             -->
            <conversionParameters>
                <video>
                    <size>1920:1080</size>
                    <fps>25</fps>
                    <pixelFormat>422</pixelFormat>
                    <bitDepth>10</bitDepth>
                </video>
                <audio>
                    <sampleRate>48000</sampleRate>
                    <bitsSample>24</bitsSample>
                </audio>
            </conversionParameters>

            <formatConfigurations>
                <formatConfiguration name="main">

                    <!--
                        1. decode each video segment and redirect output to encode's input
                        => flatten encoded video
                    -->
                    <execEachSequence type="video" name="encodeVideo">
                        <pipe>
                            <cycle>
                                <execEachSegment name="decode_video">
                                    <exec>
                                        %{tool.ffmpeg} -y -i %{resource.essence} -map 0:0 -ss %{resource.startTime}
                                        -t %{resource.duration} -an
                                        -vf "scale=iw*sar*min(1920/(iw*sar)\,1080/ih):ih*min(1920/(iw*sar)\,1080/ih),pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fps=25"
                                        -pix_fmt yuv422p10le -f rawvideo -
                                    </exec>
                                </execEachSegment>
                            </cycle>
                            <execOnce name="encode_video">
                                %{tool.x264} --input-res 1920x1080 --input-csp i422 --input-depth 10 -
                                --colorprim bt709 --transfer bt709 --colormatrix bt709 --tune psnr
                                --fps 25/1 --interlaced --force-cfr --output-csp i422
                                --avcintra-class 100 -o %{tmp.videoEncoded}
                            </execOnce>
                        </pipe>
                    </execEachSequence>

                    <!--
                        2. decode each audio segment and redirect output to encode's input
                       => flatten encoded audio
                    -->
                    <execEachSequence type="audio" name="extractAudioSegments">
                        <execEachSegment name="decode_audio">
                            <exec>
                                mxf2raw -p %{seq.num}-%{segm.num} --start %{resource.startTime}
                                --dur %{resource.duration} %{resource.essence}
                            </exec>
                            <!-- to delete intermediate files at the end -->
                            <dynamicParameter name="tmp-%{seq.num}-%{segm.num}">%{seq.num}-%{segm.num}_a0.raw</dynamicParameter>
                        </execEachSegment>
                    </execEachSequence>

                    <!--
                        3. decode each audio segment and redirect output to encode's input
                           => flatten encoded audio
                    -->
                    <execEachSequence type="audio" name="encodeAudio">
                        <pipe>
                            <cycle>
                                <execEachSegment name="decode_audio">
                                    <exec>
                                        %{tool.ffmpeg} -f s24le -ar %{seq.sample_rate} -ac %{seq.channels}
                                        -i %{seq.num}-%{segm.num}_a0.raw -vn -af aresample=48000
                                        -acodec pcm_s24le -f s24le -
                                    </exec>
                                </execEachSegment>
                            </cycle>
                            <execOnce name="encode_audio">
                                %{tool.ffmpeg} -f s24le -i - -vn -c:a copy -f s24le %{seq.num}-audio-encoded.wav
                            </execOnce>
                        </pipe>
                        <dynamicParameter name="concatAudioInput" concat="true"> -i %{seq.num}-audio-encoded.wav</dynamicParameter>
                        <dynamicParameter name="concatAudioMap" concat="true">[%{seq.num}:a]</dynamicParameter>
                        <!-- to delete intermediate files at the end -->
                        <dynamicParameter name="tmp-%{seq.num}-audio-encoded">%{seq.num}-audio-encoded.wav</dynamicParameter>
                    </execEachSequence>

                    <!--
                        4. Remap audio in accordance with AudioMap.xml
                    -->
                    <execOnce name="audioMaping">
                        ffmpeg %{dynamic.concatAudioInput} -filter_complex "%{dynamic.concatAudioMap}amerge,pan={%seq.panParameter}[aout]"
                        -map "[aout]" -acodec pcm_s24le -ar 48000 {tmp.audioEncoded}
                    </execOnce>

                    <!--
                        5. create output .mxf from flatten encoded video and audio
                    -->
                    <execOnce name="muxing_mxf">
                        %{tool.bmx} -t as11op1a -o %{output.mxf}
                        --avci100_1080i %{tmp.videoEncoded}
                        -q 24 -s 48000 --audio-chan %{seq.ebuAudioTracks}
                        --pcm %{tmp.audioEncoded}
                    </execOnce>

                </formatConfiguration>
            </formatConfigurations>

        </format>
    </formats>
</conversion>

