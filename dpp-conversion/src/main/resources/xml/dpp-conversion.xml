<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2016 Netflix, Inc.

        This file is part of IMF Conversion Utility.

        IMF Conversion Utility is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        IMF Conversion Utility is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with IMF Conversion Utility.  If not, see <http://www.gnu.org/licenses/>.

-->
<conversion xmlns="http://conversion.imfutility.netflix.com">

    <imfValidation>%{dynamic.validateTool} -i "%{dynamic.imp}" -c "%{dynamic.cpl}" -d "%{dynamic.workingDir}"
        -e %{dynamic.referencedEssences}
        -f "%{dynamic.outputValidationFile}"
    </imfValidation>

    <formats>
        <!--
            specific configuration for each format
        -->
        <format name="dpp">
            <!--
                tmp context for temporary template parameters
            -->
            <tmpContext>
                <param id="videoEncoded" deleteOnExit="true">output.x264</param>
                <param id="audioEncoded" deleteOnExit="true">output.pcm</param>
                <param id="mediaInfoOutput" deleteOnExit="true">mediaInfo.xml</param>
            </tmpContext>

            <!--
                Destination parameters for conversion
             -->
            <defaultDestContext name="main">
                <!-- Common -->
                <param name="startTime">09:59:30:00</param>
                <!-- Video -->
                <param name="width">1920</param>
                <param name="height">1080</param>
                <param name="frameRate">25</param>
                <param name="pixelFormat">yuv422p10le</param>
                <param name="bitDepth">10</param>
                <param name="colorSpace">bt709</param>
                <param name="chromaSubsampling">i422</param>
                <param name="avcIntraClass">100</param>
                <!-- Audio -->
                <param name="sampleRate">48000</param>
                <param name="bitsSample">24</param>
            </defaultDestContext>

            <mediaInfoCommandVideo>%{tool.ffprobe} -select_streams v:0 -show_streams -noprivate -print_format xml=x=1
                "%{dynamic.mediaInfoInput}"
            </mediaInfoCommandVideo>
            <mediaInfoCommandAudio>%{tool.ffprobe} -select_streams a:0 -show_streams -noprivate -print_format xml=x=1
                "%{dynamic.mediaInfoInput}"
            </mediaInfoCommandAudio>
            <mediaInfoCommandSubtitle>%{tool.ffprobe} -select_streams d:0 -show_streams -noprivate -print_format xml=x=1
                "%{dynamic.mediaInfoInput}"
            </mediaInfoCommandSubtitle>


            <formatConfigurations>
                <formatConfiguration name="main">

                    <!--
                        extract last frame
                    -->
                    <dynamicParameter name="last_frame_file" deleteOnExit="true">
                        last_frame.png
                    </dynamicParameter>
                    <execOnce name="extract_last_frame">
                        "%{tool.ffmpeg}"
                        -ss %{dynamic.last_frame_tc} -i %{dynamic.last_essence}
                        -vframes 1 -y
                        %{dynamic.last_frame_file}
                    </execOnce>

                    <!--
                        generate slate
                    -->
                    <dynamicParameter name="slate_file" deleteOnExit="true">
                        slate.jpg
                    </dynamicParameter>

                    <!--TODO: add font support for other platforms (not only Windows)-->
                    <dynamicParameter name="font">
                        fontfile='/Windows/Fonts/arial.ttf'
                    </dynamicParameter>

                    <execOnce name="generate_slate">
                        "%{tool.ffmpeg}"
                        -y -an -f lavfi
                        -i color=c=black:s=%{dest.width}x%{dest.height}
                        -vframes 1
                        -vf
                        "[in]drawtext=fontsize=45:fontcolor=white:%{dynamic.font}:text='%{dynamic.programmeId}':x=(w-tw)/2:y=(h-th)/4,drawtext=fontsize=60:fontcolor=white:%{dynamic.font}:text='%{dynamic.programmeTitle}':x=(w-tw)/2:y=(h-th)/2[out]"
                        %{dynamic.slate_file}
                    </execOnce>

                    <!--
                        1. decode each video segment and redirect output to encode's input
                        => flatten encoded video
                    -->
                    <execEachSequence type="video" name="encodeVideo">
                        <pipe>
                            <cycle>
                                <!--20s-->
                                <execOnce name="bars">
                                    "%{tool.ffmpeg}"
                                    -an -f lavfi -i smptehdbars=s=%{dest.width}x%{dest.height}
                                    -t 20 -r %{dest.frameRate}
                                    -pix_fmt %{dest.pixelFormat} -f rawvideo -
                                </execOnce>
                                <!--7s 4fr-->
                                <execOnce name="slate">
                                    "%{tool.ffmpeg}"
                                    -loop 1 -i %{dynamic.slate_file}
                                    -vframes 179
                                    -s %{dest.width}x%{dest.height}
                                    -r %{dest.frameRate}
                                    -pix_fmt %{dest.pixelFormat} -f rawvideo -
                                </execOnce>
                                <!--2fr-->
                                <execOnce name="white">
                                    "%{tool.ffmpeg}"
                                    -an -f lavfi -i color=c=white:s=%{dest.width}x%{dest.height}
                                    -vframes 2
                                    -r %{dest.frameRate}
                                    -pix_fmt %{dest.pixelFormat} -f rawvideo -
                                </execOnce>
                                <!--2s 19fr-->
                                <execOnce name="black">
                                    "%{tool.ffmpeg}"
                                    -an -f lavfi -i color=c=black:s=%{dest.width}x%{dest.height}
                                    -vframes 69
                                    -r %{dest.frameRate}
                                    -pix_fmt %{dest.pixelFormat} -f rawvideo -
                                </execOnce>
                                <execEachSegment name="decode_video">
                                    <execOnce name="decode_video">
                                        "%{tool.ffmpeg}" -y
                                        -ss %{resource.startTimeTC}
                                        -t %{resource.durationTC} -an
                                        -i "%{resource.essence}" -map 0:0
                                        -vf
                                        "scale=iw*sar*min(%{dest.width}/(iw*sar)\,%{dest.height}/ih):ih*min(%{dest.width}/(iw*sar)\,%{dest.height}/ih),pad=%{dest.width}:%{dest.height}:(ow-iw)/2:(oh-ih)/2,fps=%{dest.frameRate}"
                                        -pix_fmt %{dest.pixelFormat} -f rawvideo -
                                    </execOnce>
                                </execEachSegment>
                                <!--5s freeze-->
                                <execOnce name="loop_last_frame">
                                    "%{tool.ffmpeg}"
                                    -loop 1
                                    -i %{dynamic.last_frame_file}
                                    -t 5
                                    -vf
                                    "scale=iw*sar*min(%{dest.width}/(iw*sar)\,%{dest.height}/ih):ih*min(%{dest.width}/(iw*sar)\,%{dest.height}/ih),pad=%{dest.width}:%{dest.height}:(ow-iw)/2:(oh-ih)/2,fps=%{dest.frameRate}"
                                    -pix_fmt %{dest.pixelFormat} -f rawvideo -
                                </execOnce>
                            </cycle>
                            <execOnce name="encode_video">
                                "%{tool.x264}" --input-res %{dest.width}x%{dest.height} --input-csp %{dest.chromaSubsampling} --input-depth
                                %{dest.bitDepth} -
                                --colorprim %{dest.colorSpace} --transfer %{dest.colorSpace} --colormatrix %{dest.colorSpace} --tune psnr
                                --fps %{dest.frameRate}/1 --interlaced --force-cfr --output-csp %{dest.chromaSubsampling}
                                --avcintra-class %{dest.avcIntraClass} -o "%{tmp.videoEncoded}"
                            </execOnce>
                        </pipe>
                    </execEachSequence>

                    <!--
                        2. Extract each audio segment from MXF due to FFMPEG mxf reading issue
                    -->
                    <execEachSequence type="audio" name="extractAudioSegments">
                        <execEachSegment name="extract_audio">
                            <execOnce name="extract_audio">
                                "%{tool.mxf2raw}" -p "%{seq.num}-%{segm.num}-%{resource.num}" --start
                                %{resource.startTimeFrameEU}
                                --dur %{resource.durationFrameEU} "%{resource.essence}"
                            </execOnce>
                            <!-- to delete intermediate files at the end -->
                            <dynamicParameter name="audio-segment-tmp-%{seq.num}-%{segm.num}-%{resource.num}"
                                              deleteOnExit="true">
                                %{seq.num}-%{segm.num}-%{resource.num}_a0.raw
                            </dynamicParameter>
                        </execEachSegment>
                    </execEachSequence>

                    <!--
                        3. decode each audio segment and redirect output to encode's input
                           => flatten encoded audio
                    -->
                    <execEachSequence type="audio" name="encodeAudio">
                        <pipe>
                            <cycle>
                                <!--20s-->
                                <execOnce name="tone">
                                    "%{tool.ffmpeg}"
                                    -stream_loop 3 -i "%{dynamic.EBULineup}"
                                    -vn -t 20
                                    -af aresample=%{dest.sampleRate}
                                    -acodec pcm_s%{dest.bitsSample}le -f s%{dest.bitsSample}le -
                                </execOnce>
                                <!--10s (00:00:07:04 slate + 00:00:00:02 white + 00:00:02:19 black)-->
                                <execOnce name="silence">
                                    %{tool.ffmpeg}
                                    -f lavfi -i anullsrc=cl=stereo:r=%{dest.sampleRate}
                                    -vn -t 10
                                    -acodec pcm_s%{dest.bitsSample}le -f s%{dest.bitsSample}le -
                                </execOnce>
                                <execEachSegment name="decode_audio">
                                    <execOnce name="decode_audio">
                                        "%{tool.ffmpeg}" -y -f s%{resource.bits_per_sample}le -ar %{resource.sample_rate}
                                        -ac %{resource.channels_num}
                                        -i "%{dynamic.audio-segment-tmp-%{seq.num}-%{segm.num}-%{resource.num}}" -vn -af
                                        aresample=%{dest.sampleRate}
                                        -acodec pcm_s%{dest.bitsSample}le -f s%{dest.bitsSample}le -
                                    </execOnce>
                                </execEachSegment>
                                <!--5s-->
                                <execOnce name="silence">
                                    %{tool.ffmpeg}
                                    -f lavfi -i anullsrc=cl=stereo:r=%{dest.sampleRate}
                                    -vn -t 5
                                    -acodec pcm_s%{dest.bitsSample}le -f s%{dest.bitsSample}le -
                                </execOnce>
                            </cycle>
                            <execOnce name="encode_audio">
                                "%{tool.ffmpeg}" -y -f s%{dest.bitsSample}le -ar %{dest.sampleRate} -ac %{seq.channels_num} -i - -vn -c:a
                                copy -f wav %{seq.num}-audio-encoded.wav
                            </execOnce>
                        </pipe>
                        <dynamicParameter name="concatAudioInput" concat="true" concatWhitespace="true">
                            -i "%{seq.num}-audio-encoded.wav"
                        </dynamicParameter>
                        <dynamicParameter name="concatAudioMap" concat="true" concatWhitespace="false">[%{seq.num}:a]
                        </dynamicParameter>
                        <!-- to delete intermediate files at the end -->
                        <dynamicParameter name="audio-virtual-track-wav-%{seq.num}" deleteOnExit="true">
                            %{seq.num}-audio-encoded.wav
                        </dynamicParameter>
                    </execEachSequence>

                    <!-- [0:a] is a simple workaround to allow amerge with a single file. It is omitted at pan stage -->
                    <dynamicParameter name="concatAudioMap" concat="true" concatWhitespace="false"
                                      if="%{dynamic.singleAudio}">[0:a]
                    </dynamicParameter>

                    <!--
                        4. Remap audio in accordance with AudioMap.xml
                    -->
                    <execOnce name="audioMaping" if="%{dynamic.hasAudio}">
                        "%{tool.ffmpeg}" -y %{dynamic.concatAudioInput} -filter_complex
                        "%{dynamic.concatAudioMap}amerge,pan=%{dynamic.panParameter}[aout]"
                        -map "[aout]" -acodec pcm_s%{dest.bitsSample}le -ar %{dest.sampleRate} -f s%{dest.bitsSample}le
                        "%{tmp.audioEncoded}"
                    </execOnce>

                    <!--
                        5. create output .mxf from flatten encoded video and audio
                    -->
                    <execOnce name="muxing_mxf_audio_video" if="%{dynamic.hasAudioAndVideo}">
                        "%{tool.bmx}" -t as11op1a -o "%{dynamic.output}.mxf"
                        -y %{dest.startTime}
                        --dm-file as11 "%{dynamic.as11CoreFramework}"
                        --dm-file dpp "%{dynamic.ukDppFramework}"
                        --seg "%{dynamic.as11SegmentationFramework}"
                        --afd 10 -a 16:9 --avci%{dest.avcIntraClass}_%{dest.height}i "%{tmp.videoEncoded}"
                        -q %{dest.bitsSample} -s %{dest.sampleRate} --audio-chan %{dynamic.ebuAudioTracks}
                        --pcm "%{tmp.audioEncoded}"
                    </execOnce>
                    <execOnce name="muxing_mxf_audio_only" if="%{dynamic.hasAudioOnly}">
                        "%{tool.bmx}" -t as11op1a -o "%{dynamic.output}.mxf"
                        -y %{dest.startTime}
                        --dm-file as11 "%{dynamic.as11CoreFramework}"
                        --dm-file dpp "%{dynamic.ukDppFramework}"
                        --seg "%{dynamic.as11SegmentationFramework}"
                        -q %{dest.bitsSample} -s %{dest.sampleRate} --audio-chan %{dynamic.ebuAudioTracks}
                        --pcm "%{tmp.audioEncoded}"
                    </execOnce>
                    <execOnce name="muxing_mxf_video_only" if="%{dynamic.hasVideoOnly}">
                        "%{tool.bmx}" -t as11op1a -o "%{dynamic.output}.mxf"
                        -y %{dest.startTime}
                        --dm-file as11 "%{dynamic.as11CoreFramework}"
                        --dm-file dpp "%{dynamic.ukDppFramework}"
                        --seg "%{dynamic.as11SegmentationFramework}"
                        --afd 10 -a 16:9 --avci%{dest.avcIntraClass}_%{dest.height}i "%{tmp.videoEncoded}"
                    </execOnce>

                    <!--
                        6. Extract each subtitle TTML segment from MXF
                    -->
                    <execEachSequence type="subtitle" name="extractSubtitleSegments">
                        <dynamicParameter name="concatTTML"></dynamicParameter>
                        <execEachSegment name="extract_ttml">
                            <execOnce name="extract_ttml">
                                "%{tool.as-02-unwrap}" "%{resource.essence}"
                                "%{seq.num}-%{segm.num}-%{resource.num}.xml"
                            </execOnce>
                            <!-- to delete intermediate files at the end -->
                            <dynamicParameter name="ttml-segment-tmp-%{seq.num}-%{segm.num}-%{resource.num}"
                                              deleteOnExit="true">
                                %{seq.num}-%{segm.num}-%{resource.num}.xml
                            </dynamicParameter>

                            <dynamicParameter name="concatTTML" concat="true" concatWhitespace="true">
                                --ttml
                                %{seq.num}-%{segm.num}-%{resource.num}.xml %{resource.offsetMS} %{resource.startTimeMS}
                                %{resource.endTimeMS}
                            </dynamicParameter>

                        </execEachSegment>

                        <dynamicParameter name="stlName">%{dynamic.output}</dynamicParameter>
                        <dynamicParameter name="stlName" unless="%{dynamic.singleSubtitle}" concat="true">-%{seq.num}</dynamicParameter>
                        <dynamicParameter name="stlName" concat="true">.stl</dynamicParameter>

                        <execOnce name="convert_ttml_to_stl">
                            %{dynamic.ttml-to-stl} %{dynamic.concatTTML} --outputSTL %{dynamic.stlName}
                            --metadata "%{dynamic.metadataXml}"
                        </execOnce>
                    </execEachSequence>
                </formatConfiguration>
            </formatConfigurations>
        </format>

    </formats>
</conversion>

